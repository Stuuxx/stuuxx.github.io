---
layout: post
title:  Exploiting Cross-Site Scripting Vulnerabilities with Polymorphic Payloads
description: In this post, the use of polymorphism in JavaScript execution payloads in Cross-Site Scripting (XSS) attacks is presented.
date:   2024-05-23 11:01:35 +0300
image:  '/images/150.jpg'
tags:   [bug bounty, web]
---

Hello hackers,

Today, I want to introduce an intriguing topic I've recently started studying: polymorphic JavaScript execution payloads for Cross-Site Scripting (XSS) attacks. This advanced technique can help bypass Web Application Firewalls (WAFs) and various filters, making it an invaluable tool for our bug bounty hunts and penetration tests. By understanding and applying polymorphism in our payloads, we can enhance our ability to exploit vulnerabilities more effectively and evade defensive mechanisms. This knowledge is essential for anyone looking to stay ahead in the ever-evolving landscape of web security.

### JSFuck

JSFuck is an esoteric and educational programming style based on the atomic parts of JavaScript. It uniquely utilizes only six different characters to write and execute code: [ ] ( ) ! +. This minimalist approach not only highlights the flexibility and power of JavaScript but also serves as an intriguing challenge for developers.

One of the remarkable features of JSFuck is its independence from the browser environment. This means you can run JSFuck code in Node.js, broadening its applications beyond traditional web contexts. Whether you are exploring the depths of JavaScript's capabilities or looking for unconventional ways to obfuscate code, JSFuck offers a fascinating avenue for both learning and experimentation.

An example of using JSFuck is the following payload, where all characters after "onerror" correspond to the JavaScript code alert(1).

{% highlight js %}
    <img src=x onerror
{% endhighlight %}

To test the payload, a site by Brutelogic was used, which allows for testing Cross-Site Scripting (XSS) payloads.
In the user field, we inserted the payload.

![]({{site.baseurl}}/images/156.jpg)
*Payload Injection*

![]({{site.baseurl}}/images/155.jpg)
*Reflection in the code*

### Technique
This technique persists in a 5-step process, they are:
1. Choice of vulnerability;
2. Collection of information about aspects of hosts in which the vulnerability is present (Example: EternalBlue — Windows 7);
3. Collection of hosts;
4. Scan directed to the hosts to validate the “chosen” vulnerability;
5. Exploitation.

### Detailing
* Choice of vulnerability: Let’s use EternalBlue as an example;
* Collection of information about aspects of hosts in which the vulnerability is present: Eternalblue is the characteristics of the hosts in which we can link the vulnerability during our survey of hosts is:
Microsoft Windows Vista SP2; Windows Server 2008 SP2 and R2 SP1; Windows 7 SP1; Windows 8.1; Windows Server 2012 Gold and R2; Windows RT 8.1; and Windows 10 Gold, 1511, and 1607; and Windows Server 2016;
* Collection of hosts: For this step, we are going to use the shodan API.

{% highlight js %}
    shodan download --limit -1 --fields ip_str test.json os:windows 7 country:<>
{% endhighlight %}

Here is the meaning of each part of the command:

* “shodan download”: Indicates the command to start downloading the search results;
* “ — limit -1”: Sets the result limit to -1, which means there is no limit on the number of results;
* “ — fields ip_str”: Specifies the fields that will be included in the download file. In this case, only the field “ip_str” (IP address) will be included;
* “test.json”: Is the name of the file where the results will be saved. In this case, the file will be called “test.json”;
* “os:windows 7”: This is a filter applied to the search to return only hosts that have the Windows 7 operating system;
* “country:<>”: This is another filter applied to the search to return only hosts located in country.

In short, this command asks Shodan to download information from all hosts running Windows 7 operating system located in country, saving only the IP addresses of these hosts in the “test.json” file. Using the “ — limit -1” parameter ensures that all results are downloaded, with no quantity restrictions.

{% highlight js %}
    shodan parse --fields ip_str test.json.gz
{% endhighlight %}

The command is used to analyze and extract specific information from a compressed file in JSON format, which contains data downloaded from Shodan.

* Scan directed to the hosts to validate the “chosen” vulnerability: For this step, we can use any tool or exploit directed to that vulnerability that we have selected to massively check all the ip’s in search of which ones are in fact vulnerable. Ex: Nmap, Nuclei, Custom Tool.
* Exploitation: In this step, we take all the hosts that are really vulnerable to that vulnerability and we exploit it manually with an exploit or something like that.

Note: This article has the sole purpose of studying and seeking knowledge. The information presented here is intended solely for educational and informational purposes.